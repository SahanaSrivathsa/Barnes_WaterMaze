%% Load data
% Rtrack strategy sheet
strategy_data = readtable('/Users/miasponseller/Desktop/Lab/Rtrack/Tg/Tg_MWM_results_06-17-2025.xlsx', VariableNamingRule='preserve');

% Convert numeric and categorical columns
% Age column to numeric
strategy_data.Age = str2double(strategy_data.Age);
strategy_data.Sex = categorical(strategy_data.Sex);
strategy_data.APP = categorical(strategy_data.APP);

% Age groups
age = strategy_data.Age;
age_group = NaN(height(strategy_data), 1);

age_group(age >= 4 & age <= 6) = 5;
age_group(age >= 7 & age <= 9) = 8;
age_group(age >= 10 & age <= 12) = 11;
age_group(age >= 13 & age <= 14) = 13.5;
age_group(age >= 15 & age <= 16) = 15.5;
age_group(age >= 17 & age <= 19) = 18;
age_group(age >= 20 & age <= 21) = 20; % only have age 20, so calling it 20 for now

strategy_data.age_group = categorical(age_group);

% Strategy categories
strat_cats = {
    {'thigmotaxis', 'circling', 'random path'}, 'NonGoal';
    {'scanning', 'chaining'}, 'Procedural';
    {'directed search', 'corrected path', 'direct path', 'perseverance'} 'Allocentric'
    };

cat_labels = strat_cats(:, 2);
cat_names = {'Non-Goal Oriented', 'Procedural', 'Allocentric'};
n_cats = numel(cat_labels);

rats = unique(strategy_data.("_TargetID"));
n_rats = numel(rats);

unique_days = unique(strategy_data.("_Day"));
n_days = numel(unique_days);

%% Compute mean category probabilities per rat x day

rat_means = nan(n_rats, n_cats * n_days);
AgeGroup = categorical(zeros(n_rats, 1));
Sex = categorical(zeros(n_rats, 1));
Genotype = categorical(zeros(n_rats, 1));

for i = 1:n_rats
    ridx = strcmp(strategy_data.("_TargetID"), rats{i});
    
    % Age, Sex, and APP for this rat
    AgeGroup(i) = strategy_data.age_group(find(ridx, 1));
    Sex(i) = strategy_data.Sex(find(ridx, 1));
    Genotype(i) = strategy_data.APP(find(ridx, 1));

    col = 1;
    for c = 1:n_cats
        strategy_list = strat_cats{c, 1};

        % Sum probabilities of all individual strategies in the category
        strat_prob = zeros(sum(ridx), 1);
        for s = 1:numel(strategy_list)
            strat_prob = strat_prob + strategy_data.(strategy_list{s})(ridx);
        end

        % Get means for each day
        for d = 1:n_days
            daymask = strategy_data.("_Day")(ridx) == unique_days(d);
            rat_means(i, col) = mean(strat_prob(daymask));
            col = col + 1;
        end
    end
end

%% Make Rat table

var_names = ["RatID","AgeGroup","Sex","Genotype"];
for g = 1:n_cats
    for d = 1:n_days
        var_names(end+1) = sprintf("%s_Day%d", cat_labels{g}, unique_days(d));
    end
end

% Build rat table
rat_table = [table(rats, AgeGroup, Sex, Genotype), ...
             array2table(rat_means, "VariableNames", var_names(5:end))];

rat_table.AgeGroup = removecats(rat_table.AgeGroup);
rat_table.Sex      = removecats(rat_table.Sex);
rat_table.Genotype = removecats(rat_table.Genotype);


%% ANOVA and Post-Hoc test

results = struct();

for g = 1:n_cats
    cat_cols = startsWith(rat_table.Properties.VariableNames, cat_labels{g});
    cat_vars = rat_table(:, cat_cols);

    left_side = strjoin(cat_vars.Properties.VariableNames, ',');
    formula  = char(sprintf('%s ~ AgeGroup + Sex + Genotype', left_side));

    Day = categorical(repmat(1:n_days, 1));
    withinDesign = table(Day', 'VariableNames', {'Day'});

    tbl = [rat_table(:, ["AgeGroup","Sex","Genotype"]), cat_vars];
    rm  = fitrm(tbl, formula, 'WithinDesign', withinDesign);

    results(g).name    = cat_names{g};
    results(g).omnibus = ranova(rm, 'WithinModel', 'Day');

    fprintf("\n================ %s =================\n", cat_names{g});
    disp(results(g).omnibus);

    % Tukeyâ€‘Kramer postâ€‘hoc for Day within each AgeGroup
    postTbl = multcompare(rm, "Day", "By", "AgeGroup", "ComparisonType", "tukey-kramer");

    % Bonferroni correction
    m = height(postTbl);
    postTbl.Bonferroni_pValue = min(postTbl.pValue * m, 1);

    % Move AgeGroup to front and sort numerically
    postTbl = movevars(postTbl, 'AgeGroup', 'Before', 1);
    postTbl.AgeNum = str2double(string(postTbl.AgeGroup));
    postTbl = sortrows(postTbl, 'AgeNum');
    postTbl.AgeNum = [];

    % Display full results
    fprintf('Postâ€‘hoc Day comparisons by AgeGroup (Bonferroni corrected):\n');
    disp(postTbl(:, {'AgeGroup','Day_1','Day_2','pValue','Bonferroni_pValue'}));

    % Display only significant comparisons
    alpha = 0.05;
    sigTbl = postTbl(postTbl.Bonferroni_pValue < alpha, :);

    fprintf('\nSignificant comparisons (Bonferroniâ€‘corrected p < %.3f):\n', alpha);
    if isempty(sigTbl)
        disp('   None');
    else
        disp(sigTbl(:, {'AgeGroup','Day_1','Day_2','pValue','Bonferroni_pValue'}));
    end

    % Store results
    results(g).posthoc_all  = postTbl;
    results(g).posthoc_sig  = sigTbl;
end